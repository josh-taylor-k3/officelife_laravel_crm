name: Build and test

on:
  push:
    branches:
      - main
      - release
      - next
      - alpha
  pull_request:
    types: [opened, synchronize, reopened]
  release:
    types: [created]
  workflow_run:
    workflows:
      - Compress images
    types: [completed]

jobs:
  #############
  # Run tests
  #############
  tests:
    runs-on: ubuntu-latest
    name: Test on ${{ matrix.connection }} (PHP ${{ matrix.php-version }})

    services:
      mysql:
        image: mysql:5.7
        env:
          MYSQL_ALLOW_EMPTY_PASSWORD: false
          MYSQL_ROOT_PASSWORD: password
          MYSQL_DATABASE: officelife
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    strategy:
      fail-fast: false
      matrix:
        php-version: ['7.4']
        connection: [sqlite, mysql]

    steps:
      - name: Checkout sources
        uses: actions/checkout@v2

      - name: Setup PHP ${{ matrix.php-version }}
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php-version }}
          extensions: mbstring, dom, fileinfo, mysql
          coverage: none
      - name: Check PHP Version
        run: php -v
      - name: Check Composer Version
        run: composer -V
      - name: Check PHP Extensions
        run: php -m

    # Composer
      - name: Validate composer.json and composer.lock
        run: composer validate

      - name: Get Composer Cache Directory
        id: composer-cache
        run: echo "::set-output name=dir::$(composer config cache-files-dir)"
      - name: Cache composer files
        uses: actions/cache@v2
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
            ${{ runner.os }}-composer-

      - name: Install composer dependencies
        run: composer install --no-progress --no-interaction --no-suggest --prefer-dist --optimize-autoloader

    # Prepare
      - name: Prepare environment
        run: |
          cp tests/.env.ci-${{ matrix.connection }} .env
          touch config/version
          echo '{"/js/app.js": "/js/app.js", "/css/app.css": "/css/app.css"}' > public/mix-manifest.json
          mkdir -p public/js
          echo '' > public/js/app.js
          mkdir -p public/css
          echo '' > public/css/app.css
      - name: Create SQLite database
        if: matrix.connection == 'sqlite'
        run: |
          mkdir -p database
          touch database/database.sqlite

      - name: Generate key
        run: php artisan key:generate

      - name: Run migrations
        run: php artisan migrate --no-interaction -vvv
      - name: Run seeds
        run: php artisan db:seed --no-interaction -vvv

    # Test
      - name: Run Unit test suite
        if: matrix.connection == 'mysql'
        run: phpdbg -dmemory_limit=4G -qrr vendor/bin/phpunit -c phpunit.xml --testsuite Unit --log-junit ./results/${{ matrix.connection }}/results1.xml --coverage-clover ./results/${{ matrix.connection }}/coverage.xml
      - name: Run Unit test suite
        if: matrix.connection != 'mysql'
        run: vendor/bin/phpunit -c phpunit.xml --testsuite Unit --log-junit ./results/${{ matrix.connection }}/results1.xml
      - name: Run Integration test suite
        if: matrix.connection == 'sqlite'
        run: vendor/bin/phpunit -c phpunit.xml --testsuite Integration --log-junit ./results/${{ matrix.connection }}/results2.xml

      - name: Store results
        uses: actions/upload-artifact@v2
        with:
          name: results
          path: results

  ###########################
  # Reporting to sonarcloud
  ###########################
  reporting:
    needs: tests
    runs-on: ubuntu-latest
    name: Sonarcloud
    if: ${{ ! startsWith(github.ref, 'dependabot/') }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis

      # If this run was triggered by a pull request event, then checkout
      # the head of the pull request instead of the merge commit.
      - name: Checkout HEAD
        if: github.event_name == 'pull_request'
        run: git checkout HEAD^2

      - name: Download results
        uses: actions/download-artifact@v2
        with:
          name: results
          path: results

      - name: Fix results files
        run: |
          sed -i -e "s%$GITHUB_WORKSPACE/%%g" results/*/*.xml

      - name: Set version parameter
        id: version
        run: |
          version=$(git tag --points-at HEAD)
          test -z "$version" && version="main"
          echo "::set-output name=value::$version"

      - name: SonarCloud Scan
        if: env.SONAR_TOKEN != ''
        uses: SonarSource/sonarcloud-github-action@v1.4
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args: |
            -Dsonar.projectVersion=${{ steps.version.outputs.value }}


  ####################
  # Semantic release
  ####################
  semantic-release:
    needs: tests
    runs-on: ubuntu-latest
    name: Semantic release
    if: github.event_name != 'pull_request'

    strategy:
      matrix:
        php-version: ['7.4']

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0 # Get all tags

      - name: Semantic Release
        uses: cycjimmy/semantic-release-action@v2
        id: semantic
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          semantic_version: 17.1.2
          extra_plugins: |
            @semantic-release/changelog
            @semantic-release/git

      - name: New release published
        if: steps.semantic.outputs.new_release_published == 'true'
        run: |
          echo ${{ steps.semantic.outputs.new_release_version }}

      - name: Setup PHP ${{ matrix.php-version }}
        if: steps.semantic.outputs.new_release_published == 'true'
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php-version }}
          extensions: mbstring, dom, fileinfo, mysql
          coverage: none

    # Composer
      - name: Get Composer Cache Directory
        if: steps.semantic.outputs.new_release_published == 'true'
        id: composer-cache
        run: echo "::set-output name=dir::$(composer config cache-files-dir)"
      - name: Cache composer files
        if: steps.semantic.outputs.new_release_published == 'true'
        uses: actions/cache@v2
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
            ${{ runner.os }}-composer-

    # Yarn
      - name: Get yarn cache directory path
        if: steps.semantic.outputs.new_release_published == 'true'
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"
      - name: Cache yarn files
        if: steps.semantic.outputs.new_release_published == 'true'
        uses: actions/cache@v2
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
            ${{ runner.os }}-yarn-

      - name: Create package
        if: steps.semantic.outputs.new_release_published == 'true'
        id: package
        run: |
          scripts/package.sh '${{ steps.semantic.outputs.new_release_version }}'

      - name: Publish package
        if: steps.semantic.outputs.new_release_published == 'true'
        run: |
          scripts/publish.sh '${{ steps.semantic.outputs.new_release_version }}' '${{ steps.package.outputs.package }}'

      - name: Store package
        if: steps.semantic.outputs.new_release_published == 'true'
        uses: actions/upload-artifact@v2
        with:
          name: release
          path: ${{ steps.package.outputs.package }}
